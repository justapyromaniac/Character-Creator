Basic file structure

html
├── Homepage.html
└── Class pages/
    └── (Class folder)/
 	    ├── (Class)-create.html/
        ├── (Class)-edit.html/
 	    ├── (Class)-index.html/
 	    └── (Class)-view.html/

Adding debug tools
Just copy paste the following somewhere:
<!-- Debug tools -->
<button class="btn btn-info" onclick="cefCustomObject.showDevTools();">Open Chrome Dev Tools</button>
<button class="btn btn-primary" onclick="cefCustomObject.opencmd();">Open cmd.exe</button>
<!-- Debug tools -->
(preferably the footer, example is on the homepage)
 
Basic page design
They are sorted according to where they are on the page!

index.html
────────────────

- Display:

Contains basic info about the class, as well as a display list of every instance of that model 

Basic intro about class in jumbotron

Navbar
Modals containing several pieces of key info about the class
(To change, the feature modals. This will be edited later, I need to make a class)
One modal containing fluff text

Display list of all classes (each entry contains one button leading to the instances (Class)-view.html)

Button leading to (Class)-create.html

Table with information on each level


- Code: 

Autogenerate the modals based on data from C#

Fill the display list based on entries in the list of class instances
(Keep it in a json for easy saving? Only one instance would be needed to make the character, can pass that instance to C#)

View button should have a value that corresponds to the index of it's instance

The table should be autofilled with data from C#

────────────────



create.html
────────────────

- Display:

Dropdowns for everything that can be chosen for that class

A button to toggle buying or picking gear

Dropdowns to pick the gear that have choices/A shop interface

The shop interface:
    - Buttons to toggle between the differens gears
    - A listbox of the selected gears
    - A display with info of the select item in the list

(The entire shop interface can be reused everywhere)

Two buttons:
    - Create button
    - Go back button

- Code:

All dropdowns should be autofilled with data from C#

The toggle buttons should make sure only data from the currently selected setting gets passed

The shop interface:
    - Buttons will be autogenerated based on C# classes (simple list)
    - The list box will be autofilled
    - The display will get data from that gear 
    - A way to generate a random money value (C# class)
    - A way to purchase a piece of gear that gets stored temporarily in a separate list

The create button should use all data present and create a json
The create button has a confirmation prompt

Both buttons lead back to (Class)-index.html

────────────────



edit.html
────────────────

- Display:

Nearly the same as the create page

The create button is an edit button


- Code: 

The edit button will edit the json at that index
The edit button has a confirmation prompt

Both buttons lead back to (Class)-index.html

────────────────



view.html
────────────────

- Display:

Displays each property under each other
A bootstrap grid where: 
 - Each row is a new property
 - Two collums
    - One for the property name
    - One which displays the data in that property

Three buttons:
 - Edit button
 - Delete buttons
 - Go back button


 - Code:
 
 No actual functionality in the display

 Edit button leads to (Class)-edit.html
 Delete button removes the instance
 Go back button leads to (Class)-index.html
 Edit and delete buttons have confirmation prompts

────────────────